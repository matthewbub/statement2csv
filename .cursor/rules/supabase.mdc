---
description: Working with Supabase
globs: 
alwaysApply: false
---

# RULES

- Always use Supabase on the Server. Never expose the Supabase SDK on the client. Use: [supabase-server.ts](mdc:src/lib/supabase-server.ts)

## AI Chat Converstation Storage

One of the primary ways we work with data in this application is via AI Chat converstaions. I've explored alot of different ways to store chat data, and I've ultimately landed on a very specific approach. 

In the `processStreamingResponse` method located in [chat.ts](mdc:src/app/chat/_utils/chat.ts); we have the `onMetadata` callback argument, the data it recieves is the token useage info. This `onMetadata` callback is where we send the user message AND the AI message to the Supabase database for storage. 

This starts the chat, but does not store anything:

```ts
const aiMessage = {
  id: crypto.randomUUID(),
  model: selectedModel.id,
  content: ""
}

const formData = new FormData();
formData.append("content", input);
formData.append("session_id", sessionId);
formData.append("model", selectedModel.id);
formData.append("messageHistory", JSON.stringify(messages));

if (attachments.length > 0) {
  attachments.forEach((attachment) => {
    formData.append("attachments", attachment.file);
  });
}

const response = await fetch("/api/v1/chat", {
  method: "POST",
  body: formData,
});
```

Then, we handle the stream, and when the stream completes is when we store the data

```ts
const reader = response.body?.getReader();
if (reader) {
  await processStreamingResponse(
    reader,
    // run this on every chunk
    (content) => {
      aiMessage.content += content;
      setMessages((prev) => {
        const newMessages = [...prev];
        const existingMessageIndex = newMessages.findIndex((m) => m.id === aiMessage.id);
        if (existingMessageIndex !== -1) {
          newMessages[existingMessageIndex] = { ...aiMessage };
        }
        return newMessages;
      });
    },
    (usage) => {
      console.log("usage", usage);
      fetch("/api/v1/chat/usage", {
        method: "POST",
        body: JSON.stringify({
          sessionId,
          aiMessage: {
            ...aiMessage,
            input: input,
            output: aiMessage.content,
            prompt_tokens: usage.promptTokens,
            completion_tokens: usage.completionTokens,
          },
        }),
      })      
        .catch((err) => console.error(err));
    }
  );
}
```

## Supabase Schema


```sql
create table public.messages (
  id uuid not null default gen_random_uuid (),
  created_at timestamp with time zone not null default now(),
  chat_session_id uuid null,
  model text null,
  metadata jsonb null,
  prompt_tokens integer null default 0,
  completion_tokens integer null default 0,
  input text null,
  output text null,
  user_id uuid not null,
  constraint Chats_pkey primary key (id),
  constraint Chats_chat_session_id_fkey1 foreign KEY (chat_session_id) references threads (id),
  constraint Chats_user_id_fkey foreign KEY (user_id) references meta (id)
) TABLESPACE pg_default;

create table public.threads (
  id uuid not null default gen_random_uuid (),
  created_at timestamp with time zone not null default now(),
  name text null,
  user_id uuid not null,
  updated_at timestamp with time zone null,
  pinned boolean null default false,
  constraint ChatSessions_pkey1 primary key (id),
  constraint ChatSessions_user_id_fkey foreign KEY (user_id) references meta (id)
) TABLESPACE pg_default;

create table public.meta (
  id uuid not null default gen_random_uuid (),
  created_at timestamp with time zone not null default now(),
  clerk_user_id text null,
  user_ip text null,
  last_day_reset timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
  last_month_reset timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
  stripe_customer_id text null,
  stripe_subscription_id text null,
  subscription_status text null,
  subscription_period_end text null,
  checkout_session_id text null,
  email text null,
  payment_status text null,
  product_id text null,
  constraint UserMetaData_pkey primary key (id),
  constraint UserMetaData_clerk_user_id_key unique (clerk_user_id),
  constraint UserMetaData_stripe_associated_email_key unique (email)
) TABLESPACE pg_default;

create table public.purchases (
  id uuid not null default gen_random_uuid (),
  created_at text not null,
  user_id uuid not null,
  stripe_customer_id text not null,
  stripe_checkout_session_id text not null,
  price_id text not null,
  amount_paid integer not null,
  currency text not null,
  payment_status text not null,
  purchase_date timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
  subscription_period_start timestamp with time zone null,
  subscription_period_end timestamp with time zone null,
  payment_type text null,
  updated_at timestamp with time zone null,
  event_type text null,
  stripe_subscription_id text null,
  constraint PurchaseHistory_pkey primary key (id),
  constraint PurchaseHistory_stripe_checkout_session_id_key unique (stripe_checkout_session_id),
  constraint PurchaseHistory_user_id_fkey foreign KEY (user_id) references meta (id)
) TABLESPACE pg_default;
```
